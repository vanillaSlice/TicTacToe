{"version":3,"sources":["../package.json","scripts/index.js"],"names":["module","exports","name","version","description","keywords","homepage","bugs","url","email","license","author","repository","type","scripts","test","start","build","devDependencies","acorn","autoprefixer","eslint","stylelint","private","playerWithTurn","hasStarted","isGameOver","modeInputElements","document","querySelectorAll","playersElement","querySelector","playerXElement","playerXScoreElement","playerOElement","playerOScoreElement","messageElement","gridElement","gridMaskElement","cellElements","restartBtnElement","versionElement","crossTemplate","circleTemplate","winningLines","Player","symbol","score","playerX","playerO","mode","grid","Array","handleModeChange","e","target","value","resetGame","resetState","resetDomElements","startMultiplayerGame","setupGameAgainstComputer","fill","highlightPlayerElementWithTurn","replacePlayerXElement","clearCellElements","replaceGridMaskElement","classList","toggle","newPlayerXElement","cloneNode","replaceChild","children","forEach","innerHTML","newGridMaskElement","startGame","setMessage","computerMakeMove","message","index","findBestMoveIndex","emptyCells","reduce","acc","cell","i","push","threshold","Math","random","length","splice","indexOf","floor","setTimeout","makeMove","bestMove","points","_","minimax","computerSymbol","isWinner","isGridFilled","nextSymbol","max","cur","min","some","line","first","second","third","every","isMoveAllowed","innerText","handlePlayerOElementClick","handleCellElementClick","addEventListener"],"mappings":"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","file":"scripts.67737733.js","sourceRoot":"../src","sourcesContent":["module.exports={name:\"tic-tac-toe\",version:\"1.1.0\",description:\"Advanced Front End Development Project for FreeCodeCamp\",keywords:[\"tic-tac-toe\",\"freecodecamp\"],homepage:\"https://tictactoe.mikelowe.xyz/\",bugs:{url:\"https://github.com/vanillaSlice/TicTacToe/issues\",email:\"mikelowedev@gmail.com\"},license:\"MIT\",author:{name:\"Mike Lowe\",email:\"mikelowedev@gmail.com\",url:\"https://www.mikelowe.xyz/\"},repository:{type:\"git\",url:\"https://github.com/vanillaSlice/TicTacToe.git\"},scripts:{test:\"run-s test:*\",\"test:lint\":\"run-s test:lint:*\",\"test:lint:css\":\"stylelint src/**/*.css\",\"test:lint:js\":\"eslint src/**/*.js\",start:\"parcel src/index.html -d build\",build:\"parcel build src/index.html -d build --public-url ./\"},devDependencies:{acorn:\"^6.1.0\",autoprefixer:\"^9.4.7\",eslint:\"^5.14.0\",\"eslint-config-airbnb-base\":\"^13.1.0\",\"eslint-plugin-import\":\"^2.16.0\",\"npm-run-all\":\"^4.1.5\",\"parcel-bundler\":\"^1.12.3\",\"parcel-plugin-browserconfig\":\"^1.0.0\",stylelint:\"^9.10.1\",\"stylelint-config-recommended\":\"^2.1.0\"},private:!0};","import { version } from '../../package.json';\n\n/*\n * DOM Elements\n */\n\nconst modeInputElements = document.querySelectorAll('.js-mode-input');\nconst playersElement = document.querySelector('.js-players');\nlet playerXElement = document.querySelector('.js-player-x');\nlet playerXScoreElement = document.querySelector('.js-player-x-score');\nconst playerOElement = document.querySelector('.js-player-o');\nconst playerOScoreElement = document.querySelector('.js-player-o-score');\nconst messageElement = document.querySelector('.js-message');\nconst gridElement = document.querySelector('.js-grid');\nlet gridMaskElement = document.querySelector('.js-grid-mask');\nconst cellElements = document.querySelectorAll('.js-cell');\nconst restartBtnElement = document.querySelector('.js-restart-btn');\nconst versionElement = document.querySelector('.js-version');\n\n/*\n * SVG Templates\n */\n\nconst crossTemplate = '<svg width=\"94\" height=\"94\">'\n  + '<path class=\"cross-one\" stroke=\"#545454\" stroke-width=\"8\" fill=\"none\" d=\"M17,17L77,77\" />'\n  + '<path class=\"cross-two\" stroke=\"#545454\" stroke-width=\"8\" fill=\"none\" d=\"M77,17L17,77\" />'\n  + '</svg>';\n\nconst circleTemplate = '<svg width=\"94\" height=\"94\">'\n  + '<path class=\"circle\" stroke=\"#f2ebd3\" stroke-width=\"8\" fill=\"none\" d=\"M17,47c0,16.569,13.431,30,30,30s30,-13.431,30-30s-13.431,-30,-30,-30s-30,13.431,-30,30z\" />'\n  + '</svg>';\n\n/*\n * Winning Combinations\n */\n\nconst winningLines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6],\n];\n\n/*\n * Players\n */\n\nclass Player {\n  constructor(symbol) {\n    this.symbol = symbol;\n    this.type = '';\n    this.score = 0;\n  }\n}\n\nconst playerX = new Player('x');\nconst playerO = new Player('o');\n\n/*\n * State\n */\n\nlet mode = 'medium';\nlet playerWithTurn;\nconst grid = Array(9);\nlet hasStarted;\nlet isGameOver;\n\n/*\n * Functions\n */\n\nfunction handleModeChange(e) {\n  mode = e.target.value;\n  resetGame();\n}\n\nfunction resetGame() {\n  resetState();\n  resetDomElements();\n\n  if (mode === 'multiplayer') {\n    startMultiplayerGame();\n  } else {\n    setupGameAgainstComputer();\n  }\n}\n\nfunction resetState() {\n  playerX.type = 'human';\n  playerWithTurn = playerX;\n  grid.fill('');\n  hasStarted = false;\n  isGameOver = false;\n}\n\nfunction resetDomElements() {\n  highlightPlayerElementWithTurn();\n  replacePlayerXElement();\n  clearCellElements();\n  replaceGridMaskElement();\n}\n\nfunction highlightPlayerElementWithTurn() {\n  playerXElement.classList.toggle('has-turn', playerWithTurn === playerX);\n  playerOElement.classList.toggle('has-turn', playerWithTurn === playerO);\n}\n\n// Do this so the border animation plays\nfunction replacePlayerXElement() {\n  const newPlayerXElement = playerXElement.cloneNode(true);\n  playersElement.replaceChild(newPlayerXElement, playerXElement);\n  playerXElement = newPlayerXElement;\n  [, playerXScoreElement] = playerXElement.children;\n}\n\nfunction clearCellElements() {\n  cellElements.forEach((e) => {\n    e.innerHTML = '';\n  });\n}\n\n// Do this so the grid animation plays\nfunction replaceGridMaskElement() {\n  const newGridMaskElement = gridMaskElement.cloneNode(true);\n  gridElement.replaceChild(newGridMaskElement, gridMaskElement);\n  gridMaskElement = newGridMaskElement;\n}\n\nfunction startMultiplayerGame() {\n  playerO.type = 'human';\n  startGame();\n}\n\nfunction startGame() {\n  hasStarted = true;\n  setMessage(`${playerWithTurn.symbol} turn`);\n  if (playerWithTurn.type === 'computer') {\n    computerMakeMove();\n  }\n}\n\nfunction setMessage(message) {\n  messageElement.innerHTML = `<p class=\"text\">${message}</p>`;\n}\n\nfunction computerMakeMove() {\n  let index = findBestMoveIndex();\n\n  if (mode === 'easy' || mode === 'medium') {\n    const emptyCells = grid.reduce((acc, cell, i) => {\n      if (cell === '') {\n        acc.push(i);\n      }\n      return acc;\n    }, []);\n\n    const threshold = mode === 'easy' ? 0.1 : 0.9;\n    if (Math.random() > threshold && emptyCells.length > 1) {\n      emptyCells.splice(emptyCells.indexOf(index), 1);\n      index = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n    }\n  }\n\n  setTimeout(() => makeMove(index), 1000);\n}\n\nfunction findBestMoveIndex() {\n  const bestMove = { points: -2 };\n  const { symbol } = playerWithTurn;\n\n  grid.forEach((_, index) => {\n    if (grid[index] !== '') {\n      return;\n    }\n\n    const points = minimax(index, symbol, symbol);\n\n    if (bestMove.points < points) {\n      bestMove.points = points;\n      bestMove.index = index;\n    }\n  });\n\n  return bestMove.index;\n}\n\nfunction minimax(index, symbol, computerSymbol) {\n  grid[index] = symbol;\n\n  if (isWinner(symbol)) {\n    grid[index] = '';\n    return symbol === computerSymbol ? 1 : -1;\n  }\n\n  if (isGridFilled()) {\n    grid[index] = '';\n    return 0;\n  }\n\n  let points;\n  const nextSymbol = symbol === 'o' ? 'x' : 'o';\n\n  if (nextSymbol === computerSymbol) {\n    points = grid.reduce((max, cur, i) => (cur === '' ? Math.max(max, minimax(i, nextSymbol, computerSymbol)) : max), -2);\n  } else {\n    points = grid.reduce((min, cur, i) => (cur === '' ? Math.min(min, minimax(i, nextSymbol, computerSymbol)) : min), 2);\n  }\n\n  grid[index] = '';\n\n  return points;\n}\n\nfunction isWinner(symbol) {\n  return winningLines.some((line) => {\n    const first = grid[line[0]];\n    const second = grid[line[1]];\n    const third = grid[line[2]];\n    return symbol === first && symbol === second && symbol === third;\n  });\n}\n\nfunction isGridFilled() {\n  return grid.every(e => e !== '');\n}\n\nfunction makeMove(index) {\n  if (!isMoveAllowed(index)) {\n    return;\n  }\n\n  const { symbol } = playerWithTurn;\n\n  grid[index] = symbol;\n  cellElements[index].innerHTML = grid[index] === 'o' ? circleTemplate : crossTemplate;\n\n  if (isWinner(playerWithTurn.symbol)) {\n    playerWithTurn.score += 1;\n    playerXScoreElement.innerText = playerX.score === 0 ? '-' : playerX.score;\n    playerOScoreElement.innerText = playerO.score === 0 ? '-' : playerO.score;\n    setMessage(`${symbol} wins`);\n    isGameOver = true;\n    return;\n  }\n\n  if (isGridFilled()) {\n    setMessage('Draw');\n    isGameOver = true;\n    return;\n  }\n\n  playerWithTurn = playerWithTurn === playerX ? playerO : playerX;\n  highlightPlayerElementWithTurn();\n  setMessage(`${playerWithTurn.symbol} turn`);\n\n  if (playerWithTurn.type === 'computer') {\n    computerMakeMove();\n  }\n}\n\nfunction isMoveAllowed(index) {\n  return hasStarted && !isGameOver && grid[index] === '';\n}\n\nfunction setupGameAgainstComputer() {\n  playerO.type = 'computer';\n  setMessage('Start game or select player');\n}\n\nfunction handlePlayerOElementClick() {\n  if (hasStarted) {\n    return;\n  }\n\n  playerX.type = 'computer';\n  playerO.type = 'human';\n  startGame();\n}\n\nfunction handleCellElementClick(index) {\n  return () => {\n    if (isGameOver) {\n      resetGame();\n      return;\n    }\n\n    if (!hasStarted) {\n      startGame();\n    }\n\n    if (playerWithTurn.type === 'human') {\n      makeMove(index);\n    }\n  };\n}\n\n/*\n * Initialise\n */\n\nversionElement.innerText = version;\nmodeInputElements.forEach(e => e.addEventListener('change', handleModeChange));\nplayerOElement.addEventListener('click', handlePlayerOElementClick);\ncellElements.forEach((e, i) => e.addEventListener('click', handleCellElementClick(i)));\nrestartBtnElement.addEventListener('click', resetGame);\nresetGame();\n"]}